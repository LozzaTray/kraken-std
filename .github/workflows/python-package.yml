name: Python application

on:
  push: { branches: [ develop ], tags: [ "*" ] }
  pull_request:

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - python-version: "3.7"
            test-type: lint test
          - python-version: "3.8"
            test-type: lint test
          - python-version: "3.9"
            test-type: lint test
          - python-version: "3.10"
            test-type: lint test

          # NOTE(NiklasRosenstein): Dill can't serialize Python 3.11 code objects.
          #
          #     AttributeError: 'code' object has no attribute 'co_endlinetable'. Did you mean: 'co_linetable'?
          #
          #   See https://github.com/uqfoundation/dill/issues/514. The 3.6 version of Dill apparently fixes this
          #   issue, but introduces another with serializing metaclasses, see
          #   https://github.com/uqfoundation/dill/issues/332#issuecomment-1289537575.

          # - python-version: "3.11"
          #   test-type: lint test

          - python-version: "3.7"
            test-type: integrationTest
    steps:
    - uses: actions/checkout@v2
      with: { fetch-depth: 0 }
    - uses: python-slap/slap.cli@gha/install/v1
    - uses: actions/setup-python@v2
      with: { python-version: "${{ matrix.python-version }}" }
    - run: pip install pipx && pipx install kraken-wrapper

    # Need Poetry for integration tests.
    - run: pipx install poetry

    # Make sure we have Docker available for the ete-tests.
    - uses: docker/setup-buildx-action@v2

    - run: krakenw run ${{ matrix.test-type }} -v
      env:
        ARTIFACTORY_CARGO_REPOSITORY: ${{ vars.ARTIFACTORY_CARGO_REPOSITORY }}
        CLOUDSMITH_CARGO_REPOSITORY: ${{ vars.CLOUDSMITH_CARGO_REPOSITORY }}
        CLOUDSMITH_INTEGRATION_TEST_CREDENTIALS: |
          {
            "api_key": "${{ secrets.CLOUDSMITH_API_KEY }}",
            "owner": "${{ vars.CLOUDSMITH_OWNER }}",
            "user": "${{ vars.CLOUDSMITH_USER }}"
          }
        ARTIFACTORY_INTEGRATION_TEST_CREDENTIALS: |
          {
            "token": "${{ secrets.ARTIFACTORY_TOKEN }}",
            "url": "${{ vars.ARTIFACTORY_URL }}",
            "user": "${{ vars.ARTIFACTORY_USER }}"
          }

  publish:
    runs-on: ubuntu-latest
    needs: [ "test" ]
    steps:
    - uses: actions/checkout@v2
      with: { fetch-depth: 0 }
    - uses: python-slap/slap.cli@gha/install/v1
    - uses: actions/setup-python@v2
      with: { python-version: "${{ matrix.python-version }}" }
    - run: pip install pipx && pipx install kraken-wrapper

    - run: krakenw run publish? -0 -v
      env:
        PYPI_USER: __token__
        PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        TESTPYPI_USER: __token__
        TESTPYPI_PASSWORD: ${{ secrets.PYPI_TEST_TOKEN }}

  docs:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: python-slap/slap.cli@gha/install/v1
    - run: slap venv -ac && slap install --only-extras docs
    - run: slap run docs:build
    - uses: actions/upload-artifact@v2
      with: { name: docs, path: docs/_site }

  docs-publish:
    needs: [ test, docs ]
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/develop' }}
    steps:
    - uses: actions/download-artifact@v2
      with: { name: docs, path: docs/_site }
    - uses: Cecilapp/GitHub-Pages-deploy@v3
      env: { GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}" }
      with: { email: rosensteinniklas@gmail.com, build_dir: docs/_site }

  changelog-update:
    name: "Insert the Pull Request URL into new changelog entries"
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: NiklasRosenstein/slap@gha/changelog/update/v2

  assert-new-changelog-entries:
    name: "Assert that new changelog entries have been added"
    runs-on: ubuntu-latest
    if: github.base_ref != '' && !contains(github.event.pull_request.labels.*.name, 'no changelog')
    steps:
      - uses: NiklasRosenstein/slap@gha/changelog/assert-added/v2
